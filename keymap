#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp Q         &kp W       &kp E  &kp R               &kp T          &kp Y        &kp U        &kp I      &kp O             &kp P
&kp A         &kp S       &kp D  &kp F               &kp G          &kp H        &kp J        &kp K      &kp L             &kp SQT
&mt LSHIFT Z  &mt LALT X  &kp C  &kp V               &kp B          &kp N        &kp M        &kp COMMA  &mt RCTRL PERIOD  &mt RSHFT ENTER
                                 &mt LGUI BACKSPACE  &lt 1 SLASH    &lt 1 SLASH  &lt 2 SPACE
            >;
        };

        layer_1 {
            bindings = <
&kp ESCAPE      &kp LG(LEFT_ARROW)  &kp UP_ARROW  &kp LG(RIGHT)  &kp EQUAL               &kp MINUS              &kp N7        &kp N8        &kp N9        &kp NON_US_BACKSLASH
&kp TAB         &kp LEFT_ARROW      &kp DOWN      &kp RIGHT      &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp SEMICOLON
&kp LEFT_SHIFT  &ext_power EP_TOG   &bt BT_CLR    &bt BT_NXT     &kp LEFT_BRACKET        &kp RIGHT_BRACKET      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp GRAVE
                                                  &kp LGUI       &trans                  &trans                 &kp N0
            >;
        };

        layer_2 {
            bindings = <
&rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans           &rgb_ug RGB_EFR  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans           &trans           &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp RC(LG(Q))
                                          &trans  &trans    &trans  &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                        &trans  &trans    &trans  &trans
            >;
        };
    };
};
